<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jby.mybatisTest1.dao.IUserDao">
    <!-- 配置 查询结果的列名和实体类的属性名的对应关系 -->
<!--    <resultMap id="userMap" type="com.jby.mybatisTest1.domain.User">-->
    <resultMap id="userMap" type="user">
        <!-- 主键字段的对应 -->
        <id property="userId" column="id"></id>
        <!--非主键字段的对应-->
        <result property="userName" column="username"></result>
        <result property="userAddress" column="address"></result>
        <result property="userSex" column="sex"></result>
        <result property="userBirthday" column="birthday"></result>
    </resultMap>

    <!-- 抽取重复的sql语句-->
    <sql id="defaultUser">
        select * from user
    </sql>


    <!-- 查询所有 -->
    <select id="findAll" resultMap="userMap"> --    使用 resultMap 来解决字段名称不一致的问题
--         使用给数据库字段起别名来解决字段名称不一致的问题
--         select id as userId,username as userName,address as userAddress,sex as userSex,birthday as userBirthday from user;
--         select * from user;
        <include refid="defaultUser"></include>   <!--使用前面引用的sql-->

    </select>

    <!-- 保存用户 -->
<!--    <insert id="saveUser" parameterType="useR">-->
    <insert id="saveUser" parameterType="com.jby.mybatisTest1.domain.User">
        <!-- 配置插入操作后，获取插入数据的id -->
        <selectKey keyProperty="userId" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username,address,sex,birthday)values(#{userName},#{userAddress},#{userSex},#{userBirthday});
    </insert>

    <!-- 更新用户 -->
    <update id="updateUser" parameterType="user">
        update user set username=#{userName},address=#{userAddress},sex=#{userSex},birthday=#{userBirthday} where id=#{userId}
    </update>

    <!-- 删除用户-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id = #{uid}
    </delete>

    <!-- 根据id查询用户 -->
    <select id="findById" parameterType="INT" resultMap="userMap">
              <!--此时参数为简单类型，#{}中可以随便用一个变量名表示参数-->
              select * from user where id = #{uiddd}
    </select>

    <!-- 根据名称模糊查询 -->
    <select id="findByName" parameterType="string" resultMap="userMap">
        <!--   select * from user where username like #{name}      select * from user where username like ?-->
         select * from user where username like '%${value}%'    <!--select * from user where username like '%王%'  sql语句为字符串拼接，有sql注入的危险-->
    </select>

    <!-- 获取用户的总记录条数 -->
    <select id="findTotal" resultType="int">
        select count(id) from user;
    </select>

    <!-- 根据queryVo的条件查询用户,此时queryVo对象中可能包含除了User类型之外的信息 -->
    <select id="findUserByVo" parameterType="com.jby.mybatisTest1.domain.QueryVo" resultMap="userMap">
        <!--  <select id="findUserByVo" parameterType="queryvo" resultMap="userMap">-->
             select * from user where username like #{user.userName}
         </select>


    <!--使用标签动态生成sql-->
    <select id="findUserByCondition" resultMap="userMap" parameterType="user">
        select * from user
        <where>
            <if test="userName != null">
                and username = #{userName}
            </if>
            <if test="userSex != null">
                and sex = #{userSex}
            </if>
        </where>
    </select>

    <!-- 根据queryvo中的Id集合实现查询用户列表 -->
    <select id="findUserInIds" resultMap="userMap" parameterType="queryvo">
        <include refid="defaultUser"></include>
        <where>
            <if test="ids != null and ids.size()>0">
                <foreach collection="ids" open=" id in (" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>


     </mapper>



